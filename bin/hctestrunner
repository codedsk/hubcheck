#!/usr/bin/env python

import os
import pprint
import pytest
import re
import StringIO
import sys

import hubcheck


class StreamLogger(StringIO.StringIO):

    def __init__(self,old_buffer,stream_output,*args,**kwargs):
        # super(StreamLogger,self).__init__(*args,**kwargs)
        StringIO.StringIO.__init__(self,*args,**kwargs)
        self.stream_output = stream_output
        self.old_buffer = old_buffer

    def write(self,text):
        if self.stream_output is True:
            self.old_buffer.write(text)
            self.old_buffer.flush()
        # super(StreamLogger,self).write(text)
        StringIO.StringIO.write(self,text)


class HcTestRunnerTool(hubcheck.Tool):

    def __init__(self,logfile='hctestrunner.log',loglevel='INFO'):
        super(HcTestRunnerTool,self).__init__(logfile,loglevel)

        self.command_parser.add_argument(
            '--results',
            help='results filename',
            action="store",
            dest="resultsfile",
            type=str)

        self.command_parser.add_argument(
            '--verbosity',
            help='results detail level',
            action="store",
            dest="verbosity",
            type=int)

        self.command_parser.add_argument(
            '--email-smtp',
            help='address of the smtp server sending email reports',
            action="store",
            dest="email_smtp",
            type=str)

        self.command_parser.add_argument(
            '--email-from',
            help='email address of user sending email reports',
            action="store",
            dest="email_from",
            type=str)

        self.command_parser.add_argument(
            '--email-to',
            help='email address of user receiving email reports',
            nargs="+",
            action="store",
            dest="email_to",
            type=str)

        self.command_parser.add_argument(
            '--email-subject',
            help='email report subject',
            nargs="+",
            action="store",
            dest="email_subject",
            type=str)

        self.command_parser.add_argument(
            '--no-email',
            help='do not send email',
            action="store_true",
            dest="no_email",
            default=False)

        self.command_parser.add_argument(
            '--tests-dir',
            help='directory path holding tests',
            action="store",
            dest="tests_dir",
            type=str,
            default=None)

        # parse command line and config file options
        self.parse_options()

        # start logging
        self.start_logging()


    def command(self):

        # redirect stdout and stderr to variables
        # so we can log and email them later
        stream_output = self.options.verbosity > 0
        old_stdout = sys.stdout
        sys.stdout = stdout = StreamLogger(sys.stdout,stream_output)

        old_stderr = sys.stderr
        sys.stderr = stderr = StreamLogger(sys.stderr,stream_output)


        # allow users to specify the directory holding tests.
        tests_dir = self.options.tests_dir
        if tests_dir is None:
            tests_dir = hubcheck.conf.settings.tests_dir

        # run the tests
        self.logger.info("running test cases")

        result = None

        try:

            # setup py.test arguments
            pytest_args = self.options.remainder
            pytest_args.append(tests_dir)

            # disable the cacheprovider plugin because I can't control
            # where it tries to create a .cache file
            pytest_args.append('-p no:cacheprovider')

            pytest_args = " ".join(pytest_args)
            self.logger.info("pytest args string: \'%s\'" % (pytest_args))

            # start running tests
            pytest.main(pytest_args)

        except Exception as e:

            self.logger.info('error while running tests', exc_info=True)
            raise

        finally:

            # log test results
            self.logger.info("\n%s" % stdout.getvalue())
            self.logger.info("\n%s" % stderr.getvalue())

            hubcheck.utils.cleanup_temporary_files()

            # stop old tool session containers:
            # putting this last because sometimes it fails
            hubcheck.shell.ContainerManager().stop_all()


        # reset the stdout and stderr
        sys.stdout = old_stdout
        sys.stderr = old_stderr

        # save test results to a file
        if self.options.resultsfile is not None:
            self.options.resultsfile = os.path.abspath(
                                        os.path.expanduser(
                                            os.path.expandvars(
                                                self.options.resultsfile)))
            with open(self.options.resultsfile,'w') as f:
                f.write(stdout.getvalue())
                f.write(stderr.getvalue())

        # email the results if necessary
        if len(self.options.email_to) > 0 and not self.options.no_email:
            # we have permission to send email
            email_str = stdout.getvalue() + stderr.getvalue()
            if re.search('= (FAILURES|ERRORS) =',email_str) is not None:
                # there are errors to report

                # email subject set from the command line
                # is saved as a list through the argparse module
                if isinstance(self.options.email_subject,list):
                    subject = ' '.join(self.options.email_subject)
                else:
                    subject = self.options.email_subject

                try:
                    hubcheck.utils.email_report(self.options.email_smtp,
                                                self.options.email_from,
                                                self.options.email_to,
                                                subject,
                                                email_str)
                except Exception as e:
                    # don't die, just log the exception
                    # an exception here usually means there
                    # is no sendmail on the system.
                    self.logger.exception(e)

        # close the test results stream
        stdout.close()
        stderr.close()


if __name__=='__main__':

    tool = HcTestRunnerTool()
    tool.run()
