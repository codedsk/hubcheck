#!/usr/bin/env python

# tdenc [--encrypt|--decrypt] <infile> <outfile>
# tdenc --encrypt bd.info.text bd.info
# tdenc --decrypt bd.info bd.info.text

import hubcheck.testdata
import getopt
import getpass
import sys
import optparse

def parseoptions():
    usage = "usage: %prog [options] <infile> <outfile>"
    parser = optparse.OptionParser(usage=usage)
    parser.add_option('--encrypt',
                      help='encrypt data',
                      action="store_true",
                      dest="encrypt",
                      default=True)

    parser.add_option('--decrypt',
                      help='decrypt data',
                      action="store_false",
                      dest="encrypt",
                      default=True)

    options,remainder = parser.parse_args()
    return options,remainder

def encrypt(infile,outfile,password):
    f = hubcheck.testdata.Testdata().encrypt_file(password,infile)
    ff = open(outfile,'wb')
    ff.write(f.getvalue())
    ff.close()

def decrypt(infile,outfile,password):
    f = hubcheck.testdata.Testdata().decrypt_file(password,infile)
    ff = open(outfile,'wb')
    ff.write(f.getvalue())
    ff.close()

def main(argv=None):
    options,remainder = parseoptions()

    if options.encrypt == True:
        fxn = encrypt
    else:
        fxn = decrypt

    # should only be infile and outfile left in the args list
    if (len(remainder) != 2):
        raise RuntimeError("Wrong # arguments, use --help for help")

    infile,outfile = remainder

    # grab a password used to encrypt or decrypt the file
    password = getpass.getpass("Password: ")

    fxn(infile,outfile,password)

if __name__ == '__main__':
    sys.exit(main())

